{"version":3,"sources":["LetterGenerator/Letter.js","WordGenerator/Word.js","App.js","serviceWorker.js","index.js"],"names":["letter","props","react_default","a","createElement","id","className","word","console","log","randomWord","wordDescription","href","wordLink","target","App","state","letters","words","otherState","description","link","randomize","alpha","rand","Math","floor","random","output","charAt","toUpperCase","toLowerCase","_this","setState","search","fetchFromAPI","selectLetter","url","fetch","then","response","json","data","categoryLetters","_this2","this","map","index","onClick","bind","key","value","rel","LetterGenerator_Letter","style","font","WordGenerator_Word","Component","Boolean","window","location","hostname","match","ReactDOM","render","src_App_0","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"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","file":"static/js/main.d2b1ec54.chunk.js","sourcesContent":["import React from 'react';\r\nimport './Letter.css'\r\n\r\nconst letter = (props) => {\r\n    // console.log('Letter.js props ran'+ '\\n' + props)\r\n    // console.log(\r\n    //     Object.keys(props),\r\n    //     props[1]\r\n    //     )\r\n    // const alpha = \"abcdefghijklmnopqrstuvwxyz\";\r\n    // let rand = Math.floor(Math.random() * 26)\r\n    // let output = alpha.charAt(rand).toUpperCase() + \" \" + alpha.charAt(rand).toLowerCase();\r\n    // return output;\r\n\r\n    // const element = document.querySelector('p');\r\n    // element.classList.add('animated','bounce');\r\n    // element.addEventListener('animationend',function(){\r\n    //     animateCSS('p','bounce')\r\n    // })\r\n\r\n\r\n    return(\r\n        <div id=\"letter\">\r\n             {/* <link href=\"https://fonts.googleapis.com/css?family=Permanent+Marker&display=swap\" rel=\"stylesheet\"></link> */}\r\n            <p  className=\"animated bounce\">{props.letter}</p>\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default letter;","import React from 'react';\r\nimport './Word.css';\r\n\r\nconst word = (props) => {\r\n    console.log('WOrdddd', props)\r\n    return(\r\n        <div id='word'>\r\n            <h2>Wiki Word of the Day</h2>\r\n            <p className=\"word\">{props.randomWord}</p>\r\n            <p className='description'>\r\n            {props.wordDescription}\r\n            </p>\r\n            <a href={props.wordLink} target ='_blank' className='link'>{props.wordLink}</a>\r\n        </div>\r\n    );\r\n};\r\nexport default word;","import React, { Component } from 'react';\nimport './App.css';\nimport Letter from './LetterGenerator/Letter';\nimport Word from './WordGenerator/Word';\nimport { BrowerRouter as Router, Route, Link } from 'react-router-dom';\n\nclass App extends Component {\n\n  state = {\n    letters: 'Aa',\n    words: [],\n    otherState: '',\n    word: [],\n    description: '',\n    link: ''\n  }\n\n  randomize = () => {\n    let url = 'https://en.wikipedia.org/w/api.php?action=opensearch&search='\n    const alpha = \"abcdefghijklmnopqrstuvwxyz\";\n    let rand = Math.floor(Math.random() * 26)\n    let output = alpha.charAt(rand).toUpperCase() + \" \" + alpha.charAt(rand).toLowerCase();\n    this.setState({\n      letters: output\n    })\n    let search = url + output[2]\n    console.log(output);\n    this.fetchFromAPI(search)\n    return output;\n  }\n\n  selectLetter = (props) => {\n    let url = 'https://en.wikipedia.org/w/api.php?action=opensearch&search='\n    const alpha = \"abcdefghijklmnopqrstuvwxyz\";\n    let rand = Math.floor(Math.random() * 26)\n    let output = alpha.charAt(rand).toUpperCase() + \" \" + alpha.charAt(rand).toLowerCase();\n    this.setState({\n      letters: props + props.toLowerCase()\n    })\n    let search = url + props + output + output;\n    console.log(search)\n    this.fetchFromAPI(search)\n  }\n\n  fetchFromAPI = (url) => {\n\n    // {credentials:'same-origin'}\n    //{mode:'no-cors'}\n    fetch(url)\n      .then((response) => response.json())\n      .then(data => {\n        if (data[1][1] == null) {\n          console.log('error')\n          return;\n        } else {\n          this.setState({\n            words: data,\n            word: data[1][1],\n            description: data[2][1],\n            link: data[3][1]\n          })\n          console.log(this.state.words);\n        }\n      })\n  }\n\n  render() {\n    const style = {\n      font: '1.5em'\n    }\n    let categoryLetters = null;\n    const capLetter = ['A', 'B', 'C', 'D', 'E', 'F', 'G', 'H', 'I', 'J', 'K', 'L', 'M', 'N', 'O', 'P', 'Q', 'R', 'S', 'T', 'U', 'V', 'W', 'X', 'Y', 'Z',]\n    categoryLetters = (\n      <div id=\"alphabet\">\n        {capLetter.map((letter, index) => {\n          return <span onClick={this.selectLetter.bind(this, letter)} key={index} value={letter}>{letter}</span>\n        })}\n      </div>\n    );\n    return (\n      <div className=\"App\" >\n        <link href=\"https://fonts.googleapis.com/css?family=Permanent+Marker&display=swap\" rel=\"stylesheet\"></link>\n\n        <h1 id=\"title\">Fun with Letters and Words</h1>\n        <p>Select a letter</p>\n        {categoryLetters}\n        <div id=\"container\">\n\n          <Letter style={style} letter={this.state.letters} />\n          <button onClick={this.randomize}>Random Letter</button>\n\n          <Word\n            randomWord={this.state.word}\n            wordDescription={this.state.description}\n            wordLink={this.state.link}\n          />\n\n        </div>\n      </div>\n    );\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\n\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}