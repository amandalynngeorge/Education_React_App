{"version":3,"sources":["LetterGenerator/Letter.js","WordGenerator/Word.js","App.js","serviceWorker.js","index.js"],"names":["letter","props","react_default","a","createElement","id","className","word","console","log","randomWord","wordDescription","href","wordLink","target","App","state","letters","words","otherState","description","link","randomize","alpha","rand","Math","floor","random","output","charAt","toUpperCase","toLowerCase","_this","setState","search","fetchFromAPI","selectLetter","url","fetch","mode","crossDomain","method","headers","Access-Control-Allow-Origin","then","response","json","data","categoryLetters","_this2","this","map","index","onClick","bind","key","value","rel","xmlns","width","height","viewBox","fill","d","LetterGenerator_Letter","style","font","WordGenerator_Word","Component","Boolean","window","location","hostname","match","ReactDOM","render","src_App_0","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"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","file":"static/js/main.74178ad0.chunk.js","sourcesContent":["import React from 'react';\r\nimport './Letter.css'\r\n\r\nconst letter = (props) => {\r\n    // console.log('Letter.js props ran'+ '\\n' + props)\r\n    // console.log(\r\n    //     Object.keys(props),\r\n    //     props[1]\r\n    //     )\r\n    // const alpha = \"abcdefghijklmnopqrstuvwxyz\";\r\n    // let rand = Math.floor(Math.random() * 26)\r\n    // let output = alpha.charAt(rand).toUpperCase() + \" \" + alpha.charAt(rand).toLowerCase();\r\n    // return output;\r\n\r\n    // const element = document.querySelector('p');\r\n    // element.classList.add('animated','bounce');\r\n    // element.addEventListener('animationend',function(){\r\n    //     animateCSS('p','bounce')\r\n    // })\r\n\r\n\r\n    return(\r\n        <div id=\"letter\">\r\n             {/* <link href=\"https://fonts.googleapis.com/css?family=Permanent+Marker&display=swap\" rel=\"stylesheet\"></link> */}\r\n            <p  className=\"animated bounce\">{props.letter}</p>\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default letter;","import React from 'react';\r\nimport './Word.css';\r\n\r\nconst word = (props) => {\r\n    console.log('WOrdddd', props)\r\n    return(\r\n        <div id='word'>\r\n            <h2>Wiki Word of the Day</h2>\r\n            <p className=\"word\">{props.randomWord}</p>\r\n            <p className='description'>\r\n            {props.wordDescription}\r\n            </p>\r\n            <a href={props.wordLink} target ='_blank' className='link'>{props.wordLink}</a>\r\n        </div>\r\n    );\r\n};\r\nexport default word;","import React, { Component } from 'react';\r\nimport './App.css';\r\nimport Letter from './LetterGenerator/Letter';\r\nimport Word from './WordGenerator/Word';\r\nimport { BrowerRouter as Router, Route, Link } from 'react-router-dom';\r\n\r\nclass App extends Component {\r\n\r\n  state = {\r\n    letters: 'Aa',\r\n    words: [],\r\n    otherState: '',\r\n    word: [],\r\n    description: '',\r\n    link: ''\r\n  }\r\n  \r\n\r\n  randomize = () => {\r\n    let url = 'https://en.wikipedia.org/w/api.php?action=opensearch&search='\r\n    const alpha = \"abcdefghijklmnopqrstuvwxyz\";\r\n    let rand = Math.floor(Math.random() * 26)\r\n    let output = alpha.charAt(rand).toUpperCase() + \" \" + alpha.charAt(rand).toLowerCase();\r\n    this.setState({\r\n      letters: output\r\n    })\r\n    let search = url + output[2]\r\n    console.log(output);\r\n    this.fetchFromAPI(search)\r\n    return output;\r\n  }\r\n\r\n  selectLetter = (props) => {\r\n    let url = 'https://en.wikipedia.org/w/api.php?action=opensearch&search='\r\n    const alpha = \"abcdefghijklmnopqrstuvwxyz\";\r\n    let rand = Math.floor(Math.random() * 26)\r\n    let output = alpha.charAt(rand).toUpperCase() + \"  \" + alpha.charAt(rand).toLowerCase();\r\n    this.setState({\r\n      letters: props + props.toLowerCase()\r\n    })\r\n    let search = url + props + output + output;\r\n    console.log(search)\r\n    this.fetchFromAPI(search)\r\n  }\r\n\r\n  fetchFromAPI = (url) => {\r\n\r\n    // {credentials:'same-origin'}\r\n    //{mode:'no-cors'}\r\n\r\n    // headers: {'content-type': 'application/json', \r\n\r\n    fetch(url,{\r\n      mode: 'cors',\r\n      // credentials: 'same-origin',\r\n      crossDomain: true,\r\n      method: 'post',\r\n      headers: {'Access-Control-Allow-Origin':'*'}\r\n    })\r\n      .then((response) => response.json())\r\n      .then(data => {\r\n        console.log(data)\r\n        if (data[1][1] == null) {\r\n          console.log('error')\r\n          return;\r\n        } else {\r\n          this.setState({\r\n            words: data,\r\n            word: data[1][1],\r\n            description: data[2][1],\r\n            link: data[3][1]\r\n          })\r\n          console.log(this.state.words);\r\n        }\r\n      })\r\n  }\r\n\r\n  render() {\r\n    const style = {\r\n      font: '1.5em'\r\n    }\r\n    let categoryLetters = null;\r\n    const capLetter = ['A', 'B', 'C', 'D', 'E', 'F', 'G', 'H', 'I', 'J', 'K', 'L', 'M', 'N', 'O', 'P', 'Q', 'R', 'S', 'T', 'U', 'V', 'W', 'X', 'Y', 'Z',]\r\n    categoryLetters = (\r\n      <div id=\"alphabet\">\r\n        {capLetter.map((letter, index) => {\r\n          return <span onClick={this.selectLetter.bind(this, letter)} key={index} value={letter}>{letter}</span>\r\n        })}\r\n      </div>\r\n    );\r\n    return (\r\n      <div className=\"App\" >\r\n        <link href=\"https://fonts.googleapis.com/css?family=Permanent+Marker&display=swap\" rel=\"stylesheet\"></link>\r\n\r\n        <h1 id=\"title\">Fun with Letters and Words</h1>\r\n        <div id='landingContainer'>\r\n          <h2><span>Here is how this works... </span></h2><br></br>\r\n          \r\n          <p>1. Select a letter of your choosing <br></br>-or-<br></br> We can pick one for you</p>\r\n          <p>2. Have the little one receit it</p>\r\n          <p>3. Then onto the Wikipedia Word of the Day</p><br></br>\r\n          \r\n          \r\n          <svg xmlns=\"http://www.w3.org/2000/svg\" width=\"24\" height=\"24\" viewBox=\"0 0 24 24\"><path fill=\"#010101\" d=\"M20 12l-1.41-1.41L13 16.17V4h-2v12.17l-5.58-5.59L4 12l8 8 8-8z\"/></svg>\r\n          <p>Let's get started</p>\r\n        </div>\r\n        <p>Select a letter</p>\r\n        {categoryLetters}\r\n        <div id=\"container\">\r\n\r\n          <Letter style={style} letter={this.state.letters} />\r\n          <button onClick={this.randomize}>Random Letter</button>\r\n\r\n          <Word\r\n            randomWord={this.state.word}\r\n            wordDescription={this.state.description}\r\n            wordLink={this.state.link}\r\n          />\r\n\r\n        </div>\r\n      </div>\r\n    );\r\n  }\r\n}\r\n\r\nexport default App;\r\n","// This optional code is used to register a service worker.\r\n// register() is not called by default.\r\n\r\n// This lets the app load faster on subsequent visits in production, and gives\r\n// it offline capabilities. However, it also means that developers (and users)\r\n// will only see deployed updates on subsequent visits to a page, after all the\r\n// existing tabs open on the page have been closed, since previously cached\r\n// resources are updated in the background.\r\n\r\n// To learn more about the benefits of this model and instructions on how to\r\n// opt-in, read https://bit.ly/CRA-PWA\r\n\r\nconst isLocalhost = Boolean(\r\n  window.location.hostname === 'localhost' ||\r\n    // [::1] is the IPv6 localhost address.\r\n    window.location.hostname === '[::1]' ||\r\n    // 127.0.0.1/8 is considered localhost for IPv4.\r\n    window.location.hostname.match(\r\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\r\n    )\r\n);\r\n\r\nexport function register(config) {\r\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\r\n    // The URL constructor is available in all browsers that support SW.\r\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\r\n    if (publicUrl.origin !== window.location.origin) {\r\n      // Our service worker won't work if PUBLIC_URL is on a different origin\r\n      // from what our page is served on. This might happen if a CDN is used to\r\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\r\n      return;\r\n    }\r\n\r\n    window.addEventListener('load', () => {\r\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\r\n\r\n      if (isLocalhost) {\r\n        // This is running on localhost. Let's check if a service worker still exists or not.\r\n        checkValidServiceWorker(swUrl, config);\r\n\r\n        // Add some additional logging to localhost, pointing developers to the\r\n        // service worker/PWA documentation.\r\n        navigator.serviceWorker.ready.then(() => {\r\n          console.log(\r\n            'This web app is being served cache-first by a service ' +\r\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\r\n          );\r\n        });\r\n      } else {\r\n        // Is not localhost. Just register service worker\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    });\r\n  }\r\n}\r\n\r\nfunction registerValidSW(swUrl, config) {\r\n  navigator.serviceWorker\r\n    .register(swUrl)\r\n    .then(registration => {\r\n      registration.onupdatefound = () => {\r\n        const installingWorker = registration.installing;\r\n        if (installingWorker == null) {\r\n          return;\r\n        }\r\n        installingWorker.onstatechange = () => {\r\n          if (installingWorker.state === 'installed') {\r\n            if (navigator.serviceWorker.controller) {\r\n              // At this point, the updated precached content has been fetched,\r\n              // but the previous service worker will still serve the older\r\n              // content until all client tabs are closed.\r\n              console.log(\r\n                'New content is available and will be used when all ' +\r\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\r\n              );\r\n\r\n              // Execute callback\r\n              if (config && config.onUpdate) {\r\n                config.onUpdate(registration);\r\n              }\r\n            } else {\r\n              // At this point, everything has been precached.\r\n              // It's the perfect time to display a\r\n              // \"Content is cached for offline use.\" message.\r\n              console.log('Content is cached for offline use.');\r\n\r\n              // Execute callback\r\n              if (config && config.onSuccess) {\r\n                config.onSuccess(registration);\r\n              }\r\n            }\r\n          }\r\n        };\r\n      };\r\n    })\r\n    .catch(error => {\r\n      console.error('Error during service worker registration:', error);\r\n    });\r\n}\r\n\r\nfunction checkValidServiceWorker(swUrl, config) {\r\n  // Check if the service worker can be found. If it can't reload the page.\r\n  fetch(swUrl)\r\n    .then(response => {\r\n      // Ensure service worker exists, and that we really are getting a JS file.\r\n      const contentType = response.headers.get('content-type');\r\n      if (\r\n        response.status === 404 ||\r\n        (contentType != null && contentType.indexOf('javascript') === -1)\r\n      ) {\r\n        // No service worker found. Probably a different app. Reload the page.\r\n        navigator.serviceWorker.ready.then(registration => {\r\n          registration.unregister().then(() => {\r\n            window.location.reload();\r\n          });\r\n        });\r\n      } else {\r\n        // Service worker found. Proceed as normal.\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    })\r\n    .catch(() => {\r\n      console.log(\r\n        'No internet connection found. App is running in offline mode.'\r\n      );\r\n    });\r\n}\r\n\r\nexport function unregister() {\r\n  if ('serviceWorker' in navigator) {\r\n    navigator.serviceWorker.ready.then(registration => {\r\n      registration.unregister();\r\n    });\r\n  }\r\n}\r\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport './index.css';\r\nimport App from './App';\r\nimport * as serviceWorker from './serviceWorker';\r\n\r\n\r\n\r\nReactDOM.render(<App />, document.getElementById('root'));\r\n\r\n// If you want your app to work offline and load faster, you can change\r\n// unregister() to register() below. Note this comes with some pitfalls.\r\n// Learn more about service workers: https://bit.ly/CRA-PWA\r\nserviceWorker.unregister();\r\n"],"sourceRoot":""}